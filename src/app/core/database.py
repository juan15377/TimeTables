import sqlite3
from pathlib import Path
import os
# Ruta base del archivo de la base de datos
DB_NAME = "TimeTables.db"
DB_PATH = Path(__file__).resolve().parent / "TimeTables.db"

def get_connection():
    
    
    """
    Devuelve una conexión a la base de datos SQLite.
    Asegura que el archivo esté en la raíz del proyecto.
    """
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    
    def is_intersect(row_1, t1, row_2, t2):
        if row_1 == row_2:
            return True
        elif row_1 > row_2:
            return row_2 + t2 > row_1
        else:
            return row_1 + t1 > row_2

    # Conectar a SQLite
    # Registrar la función en SQLite
    conn.create_function("is_intersect", 4, is_intersect)
    
    cursor = conn.cursor()
    
    cursor.execute("PRAGMA foreign_keys = ON;")
    
    
    return conn

def init_db():
    """
    Inicializa la base de datos si es necesario.
    Crea tablas, verifica integridad, etc.
    """

    query_create_tables = [
    """CREATE TABLE PROFESSOR(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT NOT NULL
    );""",

    """CREATE TABLE CLASSROOM(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT NOT NULL
    );""",

    """CREATE TABLE CAREER(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT NOT NULL
    );""",

    """CREATE TABLE SEMESTER(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT NOT NULL
    );""",

    """CREATE TABLE SUBGROUP(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT NOT NULL
    );""",

    """CREATE TABLE GROUPS (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        CAREER INTEGER NOT NULL,
        SEMESTER INTEGER NOT NULL,
        SUBGROUP INTEGER NOT NULL,

        CONSTRAINT CAREER_FK FOREIGN KEY (CAREER) REFERENCES CAREER(ID) ON DELETE CASCADE,
        CONSTRAINT SEMESTER_FK FOREIGN KEY (SEMESTER) REFERENCES SEMESTER(ID) ON DELETE CASCADE,
        CONSTRAINT SUBGROUP_FK FOREIGN KEY (SUBGROUP) REFERENCES SUBGROUP(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE SUBJECT (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT NOT NULL,
        CODE TEXT NOT NULL,
        MINIMUM_SLOTS INTEGER NOT NULL CHECK(MINIMUM_SLOTS > 0),
        MAXIMUM_SLOTS INTEGER NOT NULL CHECK(MAXIMUM_SLOTS > MINIMUM_SLOTS),
        TOTAL_SLOTS INTEGER NOT NULL CHECK(TOTAL_SLOTS > 0),
        ONLINE BOOLEAN NOT NULL
    );""",

    """CREATE TABLE PROFESSOR_COLORS (
        ID_PROFESSOR INTEGER NOT NULL,
        ID_SUBJECT INTEGER NOT NULL,
        RED INTEGER NOT NULL CHECK (RED >= 0 AND RED <= 255),
        GREEN INTEGER NOT NULL CHECK (GREEN >= 0 AND GREEN <= 255),
        BLUE INTEGER NOT NULL CHECK (BLUE >= 0 AND BLUE <= 255),

        PRIMARY KEY (ID_PROFESSOR, ID_SUBJECT),
        CONSTRAINT PROFESSOR_FK FOREIGN KEY (ID_PROFESSOR) REFERENCES PROFESSOR(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE CLASSROOM_COLORS (
        ID_CLASSROOM INTEGER NOT NULL,
        ID_SUBJECT INTEGER NOT NULL,
        RED INTEGER NOT NULL CHECK (RED >= 0 AND RED <= 255),
        GREEN INTEGER NOT NULL CHECK (GREEN >= 0 AND GREEN <= 255),
        BLUE INTEGER NOT NULL CHECK (BLUE >= 0 AND BLUE <= 255),

        PRIMARY KEY (ID_CLASSROOM, ID_SUBJECT),
        CONSTRAINT CLASSROOM_FK FOREIGN KEY (ID_CLASSROOM) REFERENCES CLASSROOM(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE GROUP_COLORS (
        ID_GROUP INTEGER NOT NULL,
        ID_SUBJECT INTEGER NOT NULL,
        RED INTEGER NOT NULL CHECK (RED >= 0 AND RED <= 255),
        GREEN INTEGER NOT NULL CHECK (GREEN >= 0 AND GREEN <= 255),
        BLUE INTEGER NOT NULL CHECK (BLUE >= 0 AND BLUE <= 255),

        PRIMARY KEY (ID_GROUP, ID_SUBJECT),
        CONSTRAINT GROUP_FK FOREIGN KEY (ID_GROUP) REFERENCES GROUPS(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE PROFESSOR_SUBJECT (
        ID_PROFESSOR INTEGER NOT NULL,
        ID_SUBJECT INTEGER NOT NULL,

        PRIMARY KEY (ID_PROFESSOR, ID_SUBJECT),
        CONSTRAINT PROFESSOR_FK FOREIGN KEY (ID_PROFESSOR) REFERENCES PROFESSOR(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE CLASSROOM_SUBJECT (
        ID_CLASSROOM INTEGER NOT NULL,
        ID_SUBJECT INTEGER NOT NULL,

        PRIMARY KEY (ID_CLASSROOM, ID_SUBJECT),
        CONSTRAINT CLASSROOM_FK FOREIGN KEY (ID_CLASSROOM) REFERENCES CLASSROOM(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE GROUP_SUBJECT (
        ID_GROUP INTEGER NOT NULL,
        ID_SUBJECT INTEGER NOT NULL,

        PRIMARY KEY (ID_GROUP, ID_SUBJECT),
        CONSTRAINT GROUP_FK FOREIGN KEY (ID_GROUP) REFERENCES GROUPS(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE SUBJECT_SLOTS (
        ID_SLOT INTEGER PRIMARY KEY AUTOINCREMENT,
        ID_SUBJECT INTEGER NOT NULL,
        ROW_POSITION INTEGER NOT NULL,
        COLUMN_POSITION INTEGER NOT NULL,
        LEN INTEGER NOT NULL CHECK (LEN > 0),

        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE PROFESSOR_AVAILABILITY (
        ID_PROFESSOR INTEGER NOT NULL,
        ROW_POSITION INTEGER NOT NULL,
        COLUMN_POSITION INTEGER NOT NULL,
        VAL BOOLEAN NOT NULL,

        PRIMARY KEY (ID_PROFESSOR, ROW_POSITION, COLUMN_POSITION),
        CONSTRAINT PROFESSOR_FK FOREIGN KEY (ID_PROFESSOR) REFERENCES PROFESSOR(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE CLASSROOM_AVAILABILITY (
        ID_CLASSROOM INTEGER NOT NULL,
        ROW_POSITION INTEGER NOT NULL,
        COLUMN_POSITION INTEGER NOT NULL,
        VAL BOOLEAN NOT NULL,

        PRIMARY KEY (ID_CLASSROOM, ROW_POSITION, COLUMN_POSITION),
        CONSTRAINT CLASSROOM_FK FOREIGN KEY (ID_CLASSROOM) REFERENCES CLASSROOM(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE GROUP_AVAILABILITY (
        ID_GROUP INTEGER NOT NULL,
        ROW_POSITION INTEGER NOT NULL,
        COLUMN_POSITION INTEGER NOT NULL,
        VAL BOOLEAN NOT NULL,

        PRIMARY KEY (ID_GROUP, ROW_POSITION, COLUMN_POSITION),
        CONSTRAINT GROUP_FK FOREIGN KEY (ID_GROUP) REFERENCES GROUPS(ID) ON DELETE CASCADE
    );"""
    ]


    # Conectar a la base de datos SQLite
    if os.path.exists(DB_PATH):
        os.remove(DB_PATH)
        
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # Habilitar las restricciones de claves foráneas
    cursor.execute("PRAGMA foreign_keys = ON;")

    # Ejecutar las consultas para crear todas las tablas
    for query in query_create_tables:
        cursor.execute(query)        

    # Habilitar las restricciones de claves foráneas

init_db()

db_connection = get_connection()
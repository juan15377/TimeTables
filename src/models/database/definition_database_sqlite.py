import sqlite3

query_create_tables = [
    """CREATE TABLE PROFESSOR(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT
    );""",

    """CREATE TABLE CLASSROOM(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT
    );""",

    """CREATE TABLE CAREER(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT
    );""",

    """CREATE TABLE SEMESTER(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT
    );""",

    """CREATE TABLE SUBGROUP(
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT
    );""",

    """CREATE TABLE GROUPS (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        CAREER INTEGER NOT NULL,
        SEMESTER INTEGER NOT NULL,
        SUBGROUP INTEGER NOT NULL,
        
        CONSTRAINT CAREER_FK FOREIGN KEY (CAREER) REFERENCES CAREER(ID) ON DELETE CASCADE,
        CONSTRAINT SEMESTER_FK FOREIGN KEY (SEMESTER) REFERENCES SEMESTER(ID) ON DELETE CASCADE,
        CONSTRAINT SUBGROUP_FK FOREIGN KEY (SUBGROUP) REFERENCES SUBGROUP(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE SUBJECT (
        ID INTEGER PRIMARY KEY AUTOINCREMENT,
        NAME TEXT,
        CODE TEXT,
        MINIMUM_SLOTS INTEGER CHECK(MINIMUM_SLOTS > 0),
        MAXIMUM_SLOTS INTEGER CHECK(MAXIMUM_SLOTS > MINIMUM_SLOTS),
        TOTAL_SLOTS INTEGER CHECK(TOTAL_SLOTS > 0)
    );""",

    """CREATE TABLE PROFESSOR_COLORS (
        ID_PROFESSOR INTEGER,
        ID_SUBJECT INTEGER,
        RED INTEGER CHECK (red >= 0 AND red <= 255),
        GREEN INTEGER CHECK (green >= 0 AND green <= 255),
        BLUE INTEGER CHECK (blue >= 0 AND blue <= 255),

        PRIMARY KEY (ID_PROFESSOR, ID_SUBJECT),
        CONSTRAINT PROFESSOR_FK FOREIGN KEY (ID_PROFESSOR) REFERENCES PROFESSOR(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE CLASSROOM_COLORS (
        ID_CLASSROOM INTEGER,
        ID_SUBJECT INTEGER,
        RED INTEGER CHECK (red >= 0 AND red <= 255),
        GREEN INTEGER CHECK (green >= 0 AND green <= 255),
        BLUE INTEGER CHECK (blue >= 0 AND blue <= 255),
        
        PRIMARY KEY (ID_CLASSROOM, ID_SUBJECT),
        CONSTRAINT CLASSROOM_FK FOREIGN KEY (ID_CLASSROOM) REFERENCES CLASSROOM(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE GROUP_COLORS (
        ID_GROUP INTEGER,
        ID_SUBJECT INTEGER,
        RED INTEGER CHECK (red >= 0 AND red <= 255),
        GREEN INTEGER CHECK (green >= 0 AND green <= 255),
        BLUE INTEGER CHECK (blue >= 0 AND blue <= 255),

        PRIMARY KEY (ID_GROUP, ID_SUBJECT),
        CONSTRAINT GROUP_FK FOREIGN KEY (ID_GROUP) REFERENCES GROUPS(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE PROFESSOR_SUBJECT (
        ID_PROFESSOR INTEGER,
        ID_SUBJECT INTEGER,

        PRIMARY KEY (ID_PROFESSOR, ID_SUBJECT),
        CONSTRAINT PROFESSOR_FK FOREIGN KEY (ID_PROFESSOR) REFERENCES PROFESSOR(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE CLASSROOM_SUBJECT (
        ID_CLASSROOM INTEGER,
        ID_SUBJECT INTEGER,

        PRIMARY KEY (ID_CLASSROOM, ID_SUBJECT),
        CONSTRAINT CLASSROOM_FK FOREIGN KEY (ID_CLASSROOM) REFERENCES CLASSROOM(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE GROUP_SUBJECT (
        ID_GROUP INTEGER,
        ID_SUBJECT INTEGER,

        PRIMARY KEY (ID_GROUP, ID_SUBJECT),
        CONSTRAINT GROUP_FK FOREIGN KEY (ID_GROUP) REFERENCES GROUPS(ID) ON DELETE CASCADE,
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE SUBJECT_SLOTS(
        ID_SUBJECT INTEGER,
        ROW_POSITION INTEGER,
        COLUMN_POSITION INTEGER,
        LEN INTEGER CHECK (LEN > 0),

        PRIMARY KEY (ID_SUBJECT, ROW_POSITION, COLUMN_POSITION),
        CONSTRAINT SUBJECT_FK FOREIGN KEY (ID_SUBJECT) REFERENCES SUBJECT(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE PROFESSOR_AVAILABILITY (
        ID_PROFESSOR INTEGER,
        ROW_POSITION INTEGER,
        COLUMN_POSITION INTEGER,
        VAL BOOLEAN,

        PRIMARY KEY (ID_PROFESSOR, ROW_POSITION, COLUMN_POSITION),
        CONSTRAINT PROFESSOR_FK FOREIGN KEY (ID_PROFESSOR) REFERENCES PROFESSOR(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE CLASSROOM_AVAILABILITY (
        ID_CLASSROOM INTEGER,
        ROW_POSITION INTEGER,
        COLUMN_POSITION INTEGER,
        VAL BOOLEAN,

        PRIMARY KEY (ID_CLASSROOM, ROW_POSITION, COLUMN_POSITION),
        CONSTRAINT CLASSROOM_FK FOREIGN KEY (ID_CLASSROOM) REFERENCES CLASSROOM(ID) ON DELETE CASCADE
    );""",

    """CREATE TABLE GROUP_AVAILABILITY (
        ID_GROUP INTEGER,
        ROW_POSITION INTEGER,
        COLUMN_POSITION INTEGER,
        VAL BOOLEAN,

        PRIMARY KEY (ID_GROUP, ROW_POSITION, COLUMN_POSITION),
        CONSTRAINT GROUP_FK FOREIGN KEY (ID_GROUP) REFERENCES GROUPS(ID) ON DELETE CASCADE
    );"""
]
import os

directorio_actual = os.path.dirname(os.path.abspath(__file__))
ruta_archivo = os.path.join(directorio_actual, "default_model_db.db")

# Conectar a la base de datos SQLite
conn = sqlite3.connect(ruta_archivo)
cursor = conn.cursor()

# Habilitar las restricciones de claves foráneas
cursor.execute("PRAGMA foreign_keys = ON;")

# Ejecutar las consultas para crear todas las tablas
for query in query_create_tables:
    cursor.execute(query)

# Confirmar los cambios y cerrar la conexión
conn.commit()
conn.close()

import sqlite3

def is_intersect(row_1, t1, row_2, t2):
    if row_1 == row_2:
        return True
    elif row_1 > row_2:
        return row_2 + t2 > row_1
    else:
        return row_1 + t1 > row_2

# Conectar a SQLite
conn = sqlite3.connect("TimeTables.db")

# Registrar la función en SQLite
conn.create_function("is_intersect", 4, is_intersect)

conn.commit()

